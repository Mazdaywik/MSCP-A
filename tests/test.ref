/*
 Author: Antonina Nepejvoda, November 2012.

 This example demonstrates that Turchin's (Obninsk) relation approximating the loops along paths 
 in the semantics (unfolded) tree of a program is a refinements of Higman's relation.
 The input entry below is fixed. That is there exist no input (free) parameters, there is the only input data.

 In this example the Turchin relation allows completely compute the given entry point despite the fact that 
 the corresponding semantics tree contains all configurations (i.e. including transient), 
 while the Higman relation examining the function stacks leads to a loop in the residual program.
 In the other words, the computation path corresponding to the given input entry is an antichain with respect to 
 the Turchin relation and it is not an antichain with respect to the Higman relation.
*/


* The input number is a unary Peano number organized as a list. 
* 0 is represented as ()
* x+1 is represented as ('S' ( <Representation of x> ))

$ENTRY Go {e.1 = <F 'SSS'e.1>; }

* F increases the result by 1 and then calls itself on the halved argument.
* Therefore F calculates the maximum power of 2 that is equal or lesser than the argument, plus 1.
* For example, F(5)=1+F(2)=1+1+F(1)=1+1+1+F(0)=3
* F(8)=1+F(4)=1+1+F(2)=1+1+1+F(1)=1+1+1+1+F(0)=4

F {
          = ;
 'S'e.1 = 'S' <F <G 'S'e.1>>; 
}

* G and H together perform division by 2 

G { 
   = ;
  'S'e.1 = <H e.1>;
}

H { 
   = ;
  'S'e.1 = 'S' <G e.1>;
}
          