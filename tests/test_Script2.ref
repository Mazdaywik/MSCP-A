/*
 Тест взят из статьи 2016 года на CAV:
 M.T Trinh, D.H Chu, J. Jaffar, Progressive reasoning over recursively-defined strings /
 International Conference on Computer Aided Verification, 218-240

 Программа проверяет корректность следующей процедуры аудита.
 Дана строка. Заменяем в ней все символы '<' на '&lt', все символы '>' - на '&rt'.
 Процедура аудита считается корректной, если в результирующей строке не может появиться подстрока '<script'.

 Функции ReplaceBr1 и ReplaceBr2 осуществляют соответствующие замены. Функция Check проверяет, выполнена ли корректность.

 Остаточная программа после суперкомпиляции не содержит выходов, возвращающих 'F'.
*/

/***********************************************/
/*          исходная программа                 */
/***********************************************/

$ENTRY Go {
   e.p = <Check <ReplaceBr1 e.p>>;
}

ReplaceBr1 {
    e.1 '<' e.2 = <ReplaceBr2 e.1'&lt'><ReplaceBr1 e.2>;
    e.Other = <ReplaceBr2 e.Other>;
}

ReplaceBr2 {
    e.1 '>' e.2 =  e.1'&rt'<ReplaceBr2 e.2>;
    e.Other = e.Other;
}


Check {
    = 'T';
    '<script'e.2 = 'F';
    t.1 e.Z = <Check e.Z>;
}


/***********************************************/
/*          остаточная программа               */
/***********************************************/

/*
$ENTRY Go {
 e.1 =  <Check_2 e.1>;
}


Check_2 {
 e.1 '<' e.2 =  <Check_1 (e.1) (e.2)>;
 e.1 =  <Check_3 e.1>;
}


Check_1 {
 ('>' e.1) (e.2) =  <Check_1 (e.1) (e.2)>;
 (e.1 t.1 '>' e.2) (e.3) =  <Check_3_1 (e.1) (t.1) (e.2) (e.3)>;
 (e.1) (e.2) =  <Check_3_2 (e.1) (e.2)>;
}


Check_3_1 {
 (t.1 e.1) (t.2) (e.2) (e.3) =  <Check_3_1 (e.1) (t.2) (e.2) (e.3)>;
 () (t.1) (e.1) (e.2) =  <Check_1 (e.1) (e.2)>;
}


Check_3_2 {
 (t.1 e.1) (e.2) =  <Check_3_2 (e.1) (e.2)>;
 () (e.1) =  <Check_2 e.1>;
}


Check_3_3 {
 (t.1 e.1) (e.2) =  <Check_3_3 (e.1) (e.2)>;
 () (e.1) =  <Check_3 e.1>;
}


Check_3 {
 e.1 '>' e.2 =  <Check_3_3 (e.1) (e.2)>;
 e.1 =  <Check_13_0 e.1>;
}


Check_13_0 {
 =  'T';
 t.1 e.1 =  <Check_13_0 e.1>;
}

*/