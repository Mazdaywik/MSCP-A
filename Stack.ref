/*
-----------------------------------------------------------------------------------------
                              ФУНКЦИИ ПРЕОБРАЗОВАНИЯ СТЕКОВ
   
   (Слоистый) стек LAYERED_STACK имеет вид STACKLEVEL_NON_DECOMPOSED + STACKLEVEL_DECOMPOSED* + UPPERLEVEL_DECOMPOSED
   либо UPPERLEVEL_DECOMPOSED
   
   где STACKLEVEL::=((assign (var l t.Name)(e.Data)_^+)
   UPPERLEVEL::=((assign (var l t.Name)(e.Data)))
   STACK_ASSIGNMENT ::= (assign (var l t.Name)(e.Data))
   
   e.Data DECOMPOSED --- либо (call t.functionMame), либо выражение, не содержащее вызовов функций.
   e.Data может содержать (не в аргументе вызова) несколько вхождений переменных типа l с более верхнего уровня.
   
   NON_DECOMPOSED --- произвольно.
   
   В текущей версии MSCP используется ленивая семантика вычислений.
   
   Функции, доступные из модуля:
   YieldDecomposition --- декомпозиция выражения в слоистый стек.
   (((assign (var l t.n )(e.Expr)))) => (LAYERED_STACK)
   
   DecompAfterIndefinite --- перестановка в верхнем уровне стека вызова, требующего декомпозиции, на первую позицию.
   (call NAME (args (arg EXPR)))(LAYERED_STACK)(var l NAME FUN_NAME)e.CONFIG => (LAYERED_STACK)
   
   Lazy_Stack_Substitution --- подстановка переменных верхнего уровня стека в следующий за ним (с последующей декомпозицией).
   STACK_LEVEL (LAYERED_STACK) => LAYERED_STACK
-------------------------------------------------------------------------------------------
*/

/* из basics.ref */
$EXTERN RenewIndices, FreshIndex, CurrentIndex,CompareCalls,ComplexCompareCalls;
/* из basics.ref */
$EXTERN Substitute;
/* из UnfoldSCP.ref */
$EXTERN FormatStack;

/*
    Дано выражение, присвоенное переменной вершины стека. Построить стек.
   (((assign (var l t.n )(e.Expr)))) =>  LAYERED_STACK
*/
$ENTRY YieldDecomposition {
/* 1. Вершина содержит единственный вызов => возвращаем всё как есть. */
    ((assign (var l t.n )((call e.call)))) = ((assign (var l t.n )((call e.call))));

/* 2. Иначе производим ленивую декомпозицию стека, выделяя вызовы. */
    ((assign (var l t.n )(e.expr))) 
        = /* <RenewWithGuard t.n> */ 
        <One_Step_Decomp_Lazy (()) 
            <Flat_Decomposition 
                ()()(var l t.n ) e.expr
            >
        >;
}


/*
    Функция обработки результата одношаговой декомпозиции в ленивой семантике.
   
   (LAYERED_STACK) STACKLEVEL_NON_DECOMPOSED STACK_ASSIGNMENT_DECOMPOSED => LAYERED_STACK
*/
One_Step_Decomp_Lazy {
/* 1. Элемент слоя стека вычислен, и это не вызов --- кладем его в стек. */
    ((e.ThisStackLevel) e.UpperLevels)()(assign (var l t.stackvar) (e.Var)) 
        = 
        ((assign (var l t.stackvar) (e.Var)) e.ThisStackLevel) e.UpperLevels;

/* 2. Элемент слоя декомпозирован с порождением нового слоя --- добавляем новый слой в стек. */
    ((e.ThisStackLevel) e.UpperLevels)(t.NewStackEl e.LocalStack)
    (assign (var l t.stackvar) (e.Var)) 
        = 
        (t.NewStackEl e.LocalStack)
        ((assign (var l t.stackvar) (e.Var)) e.ThisStackLevel) 
        e.UpperLevels;
}

/*
    Выделение 1 уровня функциональных вызовов из данной стековой переменной.
    Вход --- (e.NewCalls)(e.ProcBrackets)(var l t.name) e.Expr  
    Выход --- (e.NewCalls)(assign (var l t.name)(e.Expr))
    
*/

Flat_Decomposition {
/*
   1. Прошлись по всей длине выражения, сформировали новый уровень стека, состоящий лишь из одного вызова ->
   этот новый уровень стека не нужен. 
*/
    ((assign (var l t.newvar) ((call e.call))))()(var l t.oldvar)(var l t.newvar),
    <IfEqual t.oldvar AUX> : 'F' 
        =
        ()(assign (var l t.oldvar) ((call e.call)));
/*
   2. В выражении на внешнем скобочном уровне есть вызов - проверяем, повторен ли он, и в зависимости от этого
   вводим или нет новую стековую переменную. 
*/
    (e.StackLevel)()(var l t.stackvar) e.NP1 (call e.call) e.NP2,
    <IfRepeatedCall (call e.call)(e.StackLevel)> :
        { (var l t.callvar)
            = 
            <Flat_Decomposition 
                (e.StackLevel)()(var l t.stackvar) e.NP1 (var l t.callvar) e.NP2
            >;
        'F' 
            = <Flat_Decomposition 
                (e.StackLevel (assign (var l (<FreshIndex 'varl_ind'>))((call e.call))))
                ()(var l t.stackvar) e.NP1 (var l (<CurrentIndex 'varl_ind'>)) e.NP2
            >;
        };

/* 3. В выражении есть более глубокий скобочный уровень - производим его декомпозицию. */
    (e.StackLevel)(e.ProcBrack)(var l t.stackvar) e.NP1 ('*'e.InBr) e.NP2,
    <NotInSet (e.InBr)(e.ProcBrack)> : 'T',
    <Flat_Decomposition (e.StackLevel)()(var l AUX)e.InBr> 
        : (e.NewStackLevel)(assign (var l AUX)(e.NewInBr))
        =
        <Flat_Decomposition 
        (e.NewStackLevel)((e.NewInBr) e.ProcBrack)(var l t.stackvar) e.NP1 ('*' e.NewInBr) e.NP2>;

/* 4. Не осталось ни вызовов, ни необработанных скобок - завершаем работу. */
    (e.StackLevel)(e.ProcBrack)(var l t.stackvar) e.Expr = (e.StackLevel)(assign (var l t.stackvar)(e.Expr));
    }

IfEqual {
    t.1 t.1 = 'T';
    t.1 t.2 = 'F';
}

NotInSet {
    t.1 (e.1 t.1 e.2) = 'F';
    t.1 (e.1) = 'T';
}

IfRepeatedCall { 
    (call e.call)() = 'F';
    (call e.call)((assign t.var ((call e.call2))) e.OtherStack),
        <ComplexCompareCalls ((call e.call))((call e.call2))> : 
            {   'T' = t.var;
                'F' = <IfRepeatedCall (call e.call)(e.OtherStack)>;
            };
    
}

/*
    t.call --- это полноценный вызов в аргументе e.Config функции t.fname, который нужно выталкивать следующим.
   Переформируем стек, так чтобы t.call стоял в нижнем слое.
   (call NAME (args (arg EXPR)))(LAYERED_STACK)(var l NAME FUN_NAME)e.CONFIG => LAYERED_STACK
*/
$ENTRY DecompAfterIndefinite {
    (call (t.callfname t.timestamp) e.arg) t.WholeStack (var l t.varname t.fname)e.Config,
    t.WholeStack : ((e.CurrStackLevel) e.Stack),
    <FindCall (t.callfname t.timestamp) e.CurrStackLevel> : t.call,
/* <RenewWithGuard t.varname> : e.x, */
    (var l (<FreshIndex 'varl_ind'>)) : t.NewStackVar,
    (assign t.call (t.NewStackVar)) : e.NewSubst
        = 
        ((assign t.NewStackVar (t.call)))
        (<Substitute (e.NewSubst) e.CurrStackLevel>)
        e.Stack;
}

FindCall {
    (t.fname t.timestamp) (assign t.stackvar (e.Expr)) e.Other,
    <FindCall (t.fname t.timestamp) e.Expr> :
    { (call e.call) = (call e.call);
        'F' = <FindCall (t.fname t.timestamp) e.Other>;
    };
    (t.fname t.timestamp) e.1 (call (t.fname t.timestamp) e.arg) e.2 
        = (call (t.fname t.timestamp) e.arg);
    (t.fname t.timestamp) e.1 ('*' e.3) e.2
        = <FindCall (t.fname t.timestamp) e.1 e.3 e.2>;
    (t.fname t.timestamp) e.1 (call t.otherfdata (args (arg e.Arg))) e.2
        = <FindCall (t.fname t.timestamp) e.1 e.Arg e.2>;
    (t.fname t.timestamp) e.Other = 'F';
}

RenewWithGuard {
	(0) = <RenewIndices 'varl_ind'>;
	t.x = ;
}


/*
    Вспомогательная функция, запрещающая чрезмерно поспешную декомпозицию.
    Вход (LAYERED_STACK)(var l t.stackvar t.fname)e.Value, где (var l t.stackvar) имеет значение (call t.fname (args (arg e.Value))) 
    выход (LAYERED_STACK)(e.NewStackLevel)(assign (var l t.stackvar) (e.NewValue)) (входная для One_Step_Decomp_Lazy) 
*/

IfASingleCall {
/*
    1. Если аргумент исходного вызова представляет собой лишь один вызов и плоская декомпозиция не нужна, помещаем его на новый уровень стека,
    а исходный вызов - в конец. 
*/
/*
    	(e.Stack)(var l (0) t.fname)(call e.Expr) =  
			(e.Stack)((assign (var l <FreshIndex 'varl_ind'>) ((call e.Expr))))
						(assign (var l (0))
							((call t.fname (args (arg (var l <CurrentIndex 'varl_ind'>)))))); 
*/
    (e.Stack)(var l t.stackvar t.fname)(call e.Expr) 
        =
        (e.Stack)((assign (var l (<FreshIndex 'varl_ind'>)) ((call e.Expr))))
        (assign (var l t.stackvar)((call t.fname (args (arg (var l (<CurrentIndex 'varl_ind'>)))))));
/* 2. Иначе производим плоскую декомпозицию аргумента. */
    (e.Stack)(var l t.stackvar t.fname)e.OldVal 
        = 
        <ReturntoFunction (e.Stack)(var l t.stackvar t.fname)
            <Flat_Decomposition ()()(var l (<FreshIndex 'varl_ind'>)) e.OldVal>
        >;
}

/*
    Вспомогательная форматирующая функция, помещающая вызов функции, аргумент которой прошел декомпозицию, 
   обратно в стек.
    Вход (LAYERED_STACK)(var l t.stackvar t.fname)STACK_LEVEL (assign (var l t.stackvar2) (e.Val))
    Выход (LAYERED_STACK)STACK_LEVEL(assign (var l t.stackvar2) (e.Val)) (входная для One_Step_Decomp_Lazy) 
*/
ReturntoFunction {
    ((e.LowerLevel)e.OtherStack)(var l t.stackvar t.fname)(e.NewLevel)(assign (var l t.stackvar2) (e.Val))
        =
        (()((assign (var l t.stackvar)((call t.fname (args (arg (var l t.stackvar2))))))e.LowerLevel)e.OtherStack)(e.NewLevel)
        (assign (var l t.stackvar2) (e.Val));
    
    ((e.LowerLevel)(e.ParentStack)e.OtherStack)(var l t.stackvar t.fname)(e.NewLevel)(assign (var l t.stackvar2) (e.Val))
        =
        (
            (e.LowerLevel)
            ((assign (var l t.stackvar)((call t.fname (args (arg (var l t.stackvar2))))))e.ParentStack)
            e.OtherStack
        )
        (e.NewLevel)
        (assign (var l t.stackvar2) (e.Val));
}

/*
    Подстановка стековых переменных в слоистый стек на следующий за ними уровень.
   STACK_LEVEL (LAYERED_STACK) => LAYERED_STACK 
*/
$ENTRY Lazy_Stack_Substitution {
/* 1. Если в стеке, который подставляем, ничего не осталось, а на верхнем уровне вызов - просто возвращаем верхний уровень. */
    ()(((assign (var l t.stackvar)((call e.call))))) 
        = ((assign (var l t.stackvar)((call e.call))));
/* 2. Если в стеке, который подставляем, ничего не осталось, а на верхнем уровне 1 элемент (не чистый вызов) - производим его декомпозицию. */
    ()(((assign (var l t.stackvar)(e.Val)))) 
        = <RenewWithGuard t.stackvar>
        <One_Step_Decomp_Lazy (())
        <Flat_Decomposition ()()(var l t.stackvar)e.Val>>;

/*
    3. Общий случай. Если в стеке, который подставляем, ничего не осталось - удаляем его и возвращаем результат подстановки.
    Предложения 1 и 2 нужны, чтобы отделить случаи, когда корневая переменная содержит вызовы, от тех, когда она содержит
    результат вычисления всей программы. 
*/
    ()(e.OtherStack) = e.OtherStack;

/* 4. Иначе подставляем очередную переменную данного уровня в следующий за ним. */
    (t.StackVarAsg e.LowerStack)(((assign (var l t.stackvar2)(e.VarVal))e.ParentStack)e.OtherStack)
        = <Lazy_Stack_Substitution 
            (e.LowerStack)
            (((assign (var l t.stackvar2) (<Substitute (t.StackVarAsg) e.VarVal>)) 
            <Substitute (t.StackVarAsg)e.ParentStack>)
            e.OtherStack)
        >;
}


/*----------------------------------------------------------------------------------------------------------*/

/*                                   ПОКА НЕ НУЖНЫЕ ФУНКЦИИ                                                 */

/*----------------------------------------------------------------------------------------------------------*/

/* Функция декомпозиции стека при вычислениях по значению. */
Global_Decomp {
	(())()(assign (var l t.stackvar) (e.Var)) = (((assign (var l t.stackvar) (e.Var))));
* Если вычислен весь вектор на этом уровне, последний --- вызов, записываем его на (новый) нижний уровень и возвр стек
* 	(()(e.ParentLevel) e.UpperLevels)()(assign (var l t.stackvar) (call e.Arg)) = 
* 		(((assign (var l t.stackvar) (call e.Arg))) (e.ParentLevel) e.UpperLevels);
* Если вычислен весь вектор на этом уровне, записываем последнее значение на новый (нижний) уровень и возвр стек
	(()(e.ParentLevel) e.UpperLevels)()(assign (var l t.stackvar) (e.Var)) = 
		(((assign (var l t.stackvar) (e.Var))) (e.ParentLevel) e.UpperLevels);
* ((<Substitute_Stack_Variable (assign (var l t.stackvar) (e.Var))e.ParentLevel>) e.UpperLevels);
* В альтернативе ниже  t.newstackvar1 всегда равно t.newstackvar; разные индексы нужны во избежание появления цикла в Рефале
* Если подстановка в последний вызов состоит из единственной переменной, содержащей один вызов, 
* производим плоскую декомпозицию этого вызова и откат
	((e.ThisStackLevel) e.UpperLevels)((assign (var l t.newstackvar) 
	(call e.FunName (args (arg e.Val)))))(assign (var l t.stackvar) ((var l t.newstackvar1))) =		
			<Rollback_Process (e.FunName) <Flat_Decomposition (Outer)()((assign (var l t.stackvar) ()) e.Val) e.Val> 
			((e.ThisStackLevel) e.UpperLevels)>;
* Элемент слоя стека вычислен, и это не вызов --- сохраняем результат и возвращаем стек
((e.ThisStackLevel)(e.ParentLevel) e.UpperLevels)()(assign (var l t.stackvar) (e.Var)) = 
		(((assign (var l t.stackvar) (e.Var)) e.ThisStackLevel)( e.ParentLevel) e.UpperLevels);
* В общем случае, т.е. элемент слоя стека был разложен в композицию, содержащую не только один функц вызов
* (не обязательно помимо него были еще функц вызовы --- возможно, константы или скобки)
* --- производим декомпозицию самого первого функц вызова в разложении и создаем новый стековый слой
	((e.ThisStackLevel) e.UpperLevels)((assign (var l t.newstackvar) (e.FirstStackElement)) e.LocalStack)(assign (var l t.stackvar) (e.Var)) = 
		<Global_Decomp
			((e.LocalStack)((assign (var l t.stackvar) (e.Var)) e.ThisStackLevel) e.UpperLevels)
			<Flat_Decomposition (Outer)()((assign (var l t.newstackvar) ())(e.FirstStackElement))(e.FirstStackElement)>
		> ;
}

* Входной формат
* (Имя функции, внутри которой стоит раскладываемое выражение)(стек, получаемый после разложения)(значение раскл переменной после разложения)(прежний стек)
* (s.FunName)()(assign (var l t.stackvar)(e.Var))(e.Stack)
* Выходной формат
* (e.Stack)
Rollback_Process {
* Если раскладывать дальше нечего (аргумент вызова есть константа) --- возвращаем стек с вызовом на этой константе 
	(e.FunctionName)()(assign (var l t.stackvar) (e.Var))((e.ThisStackLevel) e.UpperLevels) =
		(((assign (var l t.stackvar) ((call e.FunctionName (args (arg e.Var))))) e.ThisStackLevel) e.UpperLevels);
* Иначе продолжаем декомпозицию
	(e.FunctionName)((assign (var l t.newstackvar) (e.FirstStackElement))e.NewStack)(assign (var l t.stackvar) (e.Var))((e.ThisStackLevel) e.UpperLevels) =
* 	<Global_Decomp 
	<One_Step_Decomp_Lazy 
		((e.NewStack)((assign (var l t.stackvar) ((call e.FunctionName (args (arg e.Var))))) e.ThisStackLevel) e.UpperLevels)
		<Flat_Decomposition (Outer)()((assign (var l t.newstackvar) ())e.FirstStackElement)e.FirstStackElement>
	>;

}

Recogn_Impossible {
aaa = ;
}

X { = ;}
